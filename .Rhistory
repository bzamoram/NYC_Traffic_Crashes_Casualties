knitr::opts_chunk$set(echo = TRUE)
#install.packages("CRAN")
library(hms)
library(lubridate)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(caret)
library(e1071)
library(textclean)
library(MASS)
library(stringr)
library(fastDummies)
library('pROC')
# Data
raw_data = read.csv('Crashes.csv', header = TRUE)
#view(raw_data)
# I wanna change the format of my dates column from character to date, and from character in time to
raw_data$CRASH.DATE <- mdy(raw_data$CRASH.DATE) #gets the date format in the column
raw_data$CRASH.TIME <- str_pad(raw_data$CRASH.TIME, width = 5, side = "left", pad = "0") #this adds the 0 in front of of the numbers -> 05:05
raw_data$CRASH.TIME <- as_hms(paste0(raw_data$CRASH.TIME, ":00")) #this adds the :00 at the end so that it can be transformed into 05:05:00 since it is required for getting the time format in the column
raw_data$CRASH.TIME <- as_hms(raw_data$CRASH.TIME) #gets the time format in the column
#I wanna delete the empty ones in contributing factor 1 and vehicle type and number of people injured & killed and lat and long
crashes <- raw_data %>%
filter(CONTRIBUTING.FACTOR.VEHICLE.1 != "" & !is.na(CONTRIBUTING.FACTOR.VEHICLE.1) & VEHICLE.TYPE.CODE.1 != "" & !is.na(VEHICLE.TYPE.CODE.1) & NUMBER.OF.PERSONS.INJURED != "" & !is.na(NUMBER.OF.PERSONS.INJURED) & NUMBER.OF.PERSONS.KILLED != "" & !is.na(NUMBER.OF.PERSONS.KILLED) & LONGITUDE != "" & !is.na(LONGITUDE) & LATITUDE != "" & !is.na(LATITUDE))
# This is for checking if the rows with empty data points entries in two columns were deleted
# dim(raw_data)  # Original data dimensions
# dim(crashes)
# view(crashes)
# This is for checking dates count, range, structure of date, and check data
# start_date <- min(raw_data$CRASH.DATE, na.rm = TRUE)
# end_date <- max(raw_data$CRASH.DATE, na.rm = TRUE)
# start_date
# end_date
#range(raw_data$CRASH.DATE)
#str(raw_data$CRASH.DATE)
# raw_data
# ---------------------------------------------------------------- #
# This is for when I display the dates as in the format MM-DD-YYYY
#raw_data$CRASH.DATE <- format(raw_data$CRASH.DATE, "%m-%d-%Y")
# I am creating a stratified sample to make sure the sample I'm taking from the full dataset is representative,
# so that proportions are similar between the full dataset and the sampled dataset
set.seed(123) # this will ensure that the numbers don't change every time I run the file
crashes_sample <- crashes %>%
group_by(NUMBER.OF.PERSONS.INJURED, NUMBER.OF.PERSONS.KILLED, CONTRIBUTING.FACTOR.VEHICLE.1, VEHICLE.TYPE.CODE.1) %>%
sample_frac(100000 / nrow(crashes), replace = TRUE) %>%
ungroup()
view(crashes_sample)
crashes
crashes$CRASH.DATE <- format(crashes$CRASH.DATE, "%m-%d-%Y")
crashes
# I am creating a stratified sample to make sure the sample I'm taking from the full dataset is representative,
# so that proportions are similar between the full dataset and the sampled dataset
set.seed(123) # this will ensure that the numbers don't change every time I run the file
crashes_sample <- crashes %>%
group_by(NUMBER.OF.PERSONS.INJURED, NUMBER.OF.PERSONS.KILLED, CONTRIBUTING.FACTOR.VEHICLE.1, VEHICLE.TYPE.CODE.1) %>%
sample_frac(100000 / nrow(crashes), replace = TRUE) %>%
ungroup()
view(crashes_sample)
crashes_sample
get_season
# I wanna change the format of my dates column from character to date, and from character in time to
raw_data$CRASH.DATE <- mdy(raw_data$CRASH.DATE) #gets the date format in the column
raw_data$CRASH.TIME <- str_pad(raw_data$CRASH.TIME, width = 5, side = "left", pad = "0") #this adds the 0 in front of of the numbers -> 05:05
raw_data$CRASH.TIME <- as_hms(paste0(raw_data$CRASH.TIME, ":00")) #this adds the :00 at the end so that it can be transformed into 05:05:00 since it is required for getting the time format in the column
raw_data$CRASH.TIME <- as_hms(raw_data$CRASH.TIME) #gets the time format in the column
#I wanna delete the empty ones in contributing factor 1 and vehicle type and number of people injured & killed and lat and long
crashes <- raw_data %>%
filter(CONTRIBUTING.FACTOR.VEHICLE.1 != "" & !is.na(CONTRIBUTING.FACTOR.VEHICLE.1) & VEHICLE.TYPE.CODE.1 != "" & !is.na(VEHICLE.TYPE.CODE.1) & NUMBER.OF.PERSONS.INJURED != "" & !is.na(NUMBER.OF.PERSONS.INJURED) & NUMBER.OF.PERSONS.KILLED != "" & !is.na(NUMBER.OF.PERSONS.KILLED) & LONGITUDE != "" & !is.na(LONGITUDE) & LATITUDE != "" & !is.na(LATITUDE))
# This is for checking if the rows with empty data points entries in two columns were deleted
# dim(raw_data)  # Original data dimensions
# dim(crashes)
# view(crashes)
# This is for checking dates count, range, structure of date, and check data
# start_date <- min(raw_data$CRASH.DATE, na.rm = TRUE)
# end_date <- max(raw_data$CRASH.DATE, na.rm = TRUE)
# start_date
# end_date
#range(raw_data$CRASH.DATE)
#str(raw_data$CRASH.DATE)
# raw_data
# ---------------------------------------------------------------- #
# This is for when I display the dates as in the format MM-DD-YYYY
#crashes$CRASH.DATE <- format(crashes$CRASH.DATE, "%m-%d-%Y")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("CRAN")
library(hms)
library(lubridate)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(caret)
library(e1071)
library(textclean)
library(MASS)
library(stringr)
library(fastDummies)
library('pROC')
# Data
raw_data = read.csv('Crashes.csv', header = TRUE)
#view(raw_data)
# I wanna change the format of my dates column from character to date, and from character in time to
raw_data$CRASH.DATE <- mdy(raw_data$CRASH.DATE) #gets the date format in the column
raw_data$CRASH.TIME <- str_pad(raw_data$CRASH.TIME, width = 5, side = "left", pad = "0") #this adds the 0 in front of of the numbers -> 05:05
raw_data$CRASH.TIME <- as_hms(paste0(raw_data$CRASH.TIME, ":00")) #this adds the :00 at the end so that it can be transformed into 05:05:00 since it is required for getting the time format in the column
raw_data$CRASH.TIME <- as_hms(raw_data$CRASH.TIME) #gets the time format in the column
#I wanna delete the empty ones in contributing factor 1 and vehicle type and number of people injured & killed and lat and long
crashes <- raw_data %>%
filter(CONTRIBUTING.FACTOR.VEHICLE.1 != "" & !is.na(CONTRIBUTING.FACTOR.VEHICLE.1) & VEHICLE.TYPE.CODE.1 != "" & !is.na(VEHICLE.TYPE.CODE.1) & NUMBER.OF.PERSONS.INJURED != "" & !is.na(NUMBER.OF.PERSONS.INJURED) & NUMBER.OF.PERSONS.KILLED != "" & !is.na(NUMBER.OF.PERSONS.KILLED) & LONGITUDE != "" & !is.na(LONGITUDE) & LATITUDE != "" & !is.na(LATITUDE))
# This is for checking if the rows with empty data points entries in two columns were deleted
# dim(raw_data)  # Original data dimensions
# dim(crashes)
# view(crashes)
# This is for checking dates count, range, structure of date, and check data
# start_date <- min(raw_data$CRASH.DATE, na.rm = TRUE)
# end_date <- max(raw_data$CRASH.DATE, na.rm = TRUE)
# start_date
# end_date
#range(raw_data$CRASH.DATE)
#str(raw_data$CRASH.DATE)
# raw_data
# ---------------------------------------------------------------- #
# This is for when I display the dates as in the format MM-DD-YYYY
#crashes$CRASH.DATE <- format(crashes$CRASH.DATE, "%m-%d-%Y")
# I am creating a stratified sample to make sure the sample I'm taking from the full dataset is representative,
# so that proportions are similar between the full dataset and the sampled dataset
set.seed(123) # this will ensure that the numbers don't change every time I run the file
crashes_sample <- crashes %>%
group_by(NUMBER.OF.PERSONS.INJURED, NUMBER.OF.PERSONS.KILLED, CONTRIBUTING.FACTOR.VEHICLE.1, VEHICLE.TYPE.CODE.1) %>%
sample_frac(100000 / nrow(crashes), replace = TRUE) %>%
ungroup()
crashes_sample
get_season <- function(month) {
case_when(
month %in% 3:5 ~ "Spring",
month %in% 6:8 ~ "Summer",
month %in% 9:11 ~ "Fall",
TRUE ~ "Winter"
)}
crashes_sample
crash_data <- crash_data %>%
mutate(
Month = format(CRASH.DATE, "%m") %>% as.integer(),  # Extracts month
Season = get_season(Month)  # Apply season function
)
crashes_sample <- crashes_sample %>%
mutate(
Month = format(CRASH.DATE, "%m") %>% as.integer(),  # Extracts month
Season = get_season(Month)  # Apply season function
)
head(crashes_sample)
crashes_sample <- crashes_sample %>%
mutate(Season = get_season(as.integer(format(CRASH.DATE, "%m")))) %>%
select(-Month)
crashes_sample <- crashes_sample %>%
mutate(Season = get_season(as.integer(format(CRASH.DATE, "%m")))) %>%
select(-Month)
crashes_sample <- crashes_sample %>%
mutate(Season = get_season(as.integer(format(CRASH.DATE, "%m"))))
head(crashes_sample)
crashes_sample <- crashes_sample %>%
mutate(Season = get_season(as.integer(format(CRASH.DATE, "%m")))) %>%
select(-Month)
crashes_sample <- crashes_sample %>%
mutate(Season = get_season(as.integer(format(CRASH.DATE, "%m"))))
head(crashes_sample)
crashes_sample <- crashes_sample %>%
mutate(Season = get_season(as.integer(format(CRASH.DATE, "%m"))))
crashes_sample <- crashes_sample %>% select(-Month)
crashes_sample <- crashes_sample %>%
mutate(
Month = format(CRASH.DATE, "%m") %>% as.integer(),  # Extract month
Season = get_season(Month)  # Apply season function
)
crashes_sample <- crashes_sample %>% select(-Month)
crashes_sample <- crashes_sample %>%
mutate(Month = as.integer(format(CRASH.DATE, "%m"))) %>%
crashes_sample <- crashes_sample %>%
mutate(Season = get_season(Month)) %>%
select(-Month)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("CRAN")
library(hms)
library(lubridate)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(caret)
library(e1071)
library(textclean)
library(MASS)
library(stringr)
library(fastDummies)
library('pROC')
# Data
raw_data = read.csv('Crashes.csv', header = TRUE)
#view(raw_data)
# I wanna change the format of my dates column from character to date, and from character in time to
raw_data$CRASH.DATE <- mdy(raw_data$CRASH.DATE) #gets the date format in the column
raw_data$CRASH.TIME <- str_pad(raw_data$CRASH.TIME, width = 5, side = "left", pad = "0") #this adds the 0 in front of of the numbers -> 05:05
raw_data$CRASH.TIME <- as_hms(paste0(raw_data$CRASH.TIME, ":00")) #this adds the :00 at the end so that it can be transformed into 05:05:00 since it is required for getting the time format in the column
raw_data$CRASH.TIME <- as_hms(raw_data$CRASH.TIME) #gets the time format in the column
#I wanna delete the empty ones in contributing factor 1 and vehicle type and number of people injured & killed and lat and long
crashes <- raw_data %>%
filter(CONTRIBUTING.FACTOR.VEHICLE.1 != "" & !is.na(CONTRIBUTING.FACTOR.VEHICLE.1) & VEHICLE.TYPE.CODE.1 != "" & !is.na(VEHICLE.TYPE.CODE.1) & NUMBER.OF.PERSONS.INJURED != "" & !is.na(NUMBER.OF.PERSONS.INJURED) & NUMBER.OF.PERSONS.KILLED != "" & !is.na(NUMBER.OF.PERSONS.KILLED) & LONGITUDE != "" & !is.na(LONGITUDE) & LATITUDE != "" & !is.na(LATITUDE))
# This is for checking if the rows with empty data points entries in two columns were deleted
# dim(raw_data)  # Original data dimensions
# dim(crashes)
# view(crashes)
# This is for checking dates count, range, structure of date, and check data
# start_date <- min(raw_data$CRASH.DATE, na.rm = TRUE)
# end_date <- max(raw_data$CRASH.DATE, na.rm = TRUE)
# start_date
# end_date
#range(raw_data$CRASH.DATE)
#str(raw_data$CRASH.DATE)
# raw_data
# ---------------------------------------------------------------- #
# This is for when I display the dates as in the format MM-DD-YYYY
#crashes$CRASH.DATE <- format(crashes$CRASH.DATE, "%m-%d-%Y")
# I am creating a stratified sample to make sure the sample I'm taking from the full dataset is representative,
# so that proportions are similar between the full dataset and the sampled dataset
set.seed(123) # this will ensure that the numbers don't change every time I run the file
crashes_sample <- crashes %>%
group_by(NUMBER.OF.PERSONS.INJURED, NUMBER.OF.PERSONS.KILLED, CONTRIBUTING.FACTOR.VEHICLE.1, VEHICLE.TYPE.CODE.1) %>%
sample_frac(100000 / nrow(crashes), replace = TRUE) %>%
ungroup()
crashes_sample
crashes_sample <- crashes_sample %>%
mutate(Month = as.integer(format(CRASH.DATE, "%m"))) %>%
crashes_sample <- crashes_sample %>%
mutate(Season = get_season(Month)) %>%
select(-Month)
crashes_sample <- crashes_sample %>%
mutate(Month = as.integer(format(CRASH.DATE, "%m")))
crashes_sample <- crashes_sample %>%
mutate(Season = get_season(Month)) %>%
select(-Month)
crashes_sample <- crashes_sample %>%
mutate(Month = as.integer(format(CRASH.DATE, "%m")))
crashes_sample <- crashes_sample %>%
mutate(Season = get_season(Month))
crashes_sample <- crashes_sample %>%
dplyr::select(-Month)
head(crashes_sample)
crashes_sample <- crashes_sample %>%
mutate(Month = as.integer(format(CRASH.DATE, "%m")))
# Creating column with season
crashes_sample <- crashes_sample %>%
mutate(Season = get_season(Month))
# Deleting column of month in integer format
crashes_sample <- crashes_sample %>%
dplyr::select(-Month) %>%
relocate(Season, .after = CRASH.DATE)
head(crashes_sample)
get_time_of_day <- function(hour) {
case_when(
hour >= 5 & hour < 12  ~ "Morning",
hour >= 12 & hour < 17 ~ "Afternoon",
hour >= 17 & hour < 22 ~ "Night",
TRUE                   ~ "WeeHours"
)
}
crashes_sample <- crashes_sample %>%
mutate(Hour = as.integer(substr(CRASH.TIME, 1, 2))) %>%  # Extract hour from "HH:MM" format
mutate(TimeOfDay = get_time_of_day(Hour)) %>%  # Apply function
select(-Hour) %>%  # Remove temporary Hour column
relocate(TimeOfDay, .after = CRASH.TIME)
get_time_of_day <- function(hour) {
case_when(
hour >= 5 & hour < 12  ~ "Morning",
hour >= 12 & hour < 17 ~ "Afternoon",
hour >= 17 & hour < 22 ~ "Night",
TRUE                   ~ "WeeHours"
)
}
crashes_sample <- crashes_sample %>%
mutate(Hour = as.integer(substr(CRASH.TIME, 1, 2)))
# Extract hour from "HH:MM" format
crashes_sample <- crashes_sample %>%
mutate(TimeOfDay = get_time_of_day(Hour))
# Apply function
crashes_sample <- crashes_sample %>%
dplyr::select(-Hour) %>%
relocate(TimeOfDay, .after = CRASH.TIME)
head(crashes_sample)
# CRASH.DATE into season
# 1. Create Month column(integer)
crashes_sample <- crashes_sample %>%
mutate(Month = as.integer(format(CRASH.DATE, "%m")))
# Creating column with season
crashes_sample <- crashes_sample %>%
mutate(SEASON = get_season(Month))
# Deleting column of month in integer format, and relocate season column
crashes_sample <- crashes_sample %>%
dplyr::select(-Month) %>%
relocate(SEASON, .after = CRASH.DATE)
# CRASH.TIME into time_of_day
get_time_of_day <- function(hour) {
case_when(
hour >= 5 & hour < 12  ~ "Morning",
hour >= 12 & hour < 17 ~ "Afternoon",
hour >= 17 & hour < 22 ~ "Night",
TRUE                   ~ "WeeHours"
)
}
crashes_sample <- crashes_sample %>%
mutate(Hour = as.integer(substr(CRASH.TIME, 1, 2)))
# Extract hour from "HH:MM" format
crashes_sample <- crashes_sample %>%
mutate(TIMEOFDAY = get_time_of_day(Hour))
# Apply function
crashes_sample <- crashes_sample %>%
dplyr::select(-Hour) %>%
relocate(TIMEOFDAY, .after = CRASH.TIME)
head(crashes_sample)
# CRASH.DATE into season
# 1. Create Month column(integer)
crashes_sample <- crashes_sample %>%
mutate(Month = as.integer(format(CRASH.DATE, "%m")))
# Creating column with season
crashes_sample <- crashes_sample %>%
mutate(SEASON = get_season(Month))
# Deleting column of month in integer format, and relocate season column
crashes_sample <- crashes_sample %>%
dplyr::select(-Month) %>%
relocate(SEASON, .after = CRASH.DATE)
# CRASH.TIME into time_of_day
get_time_of_day <- function(hour) {
case_when(
hour >= 5 & hour < 12  ~ "Morning",
hour >= 12 & hour < 17 ~ "Afternoon",
hour >= 17 & hour < 22 ~ "Night",
TRUE                   ~ "WeeHours"
)
}
crashes_sample <- crashes_sample %>%
mutate(Hour = as.integer(substr(CRASH.TIME, 1, 2)))
# Extract hour from "HH:MM" format
crashes_sample <- crashes_sample %>%
mutate(TIMEOFDAY = get_time_of_day(Hour))
# Apply function
crashes_sample <- crashes_sample %>%
dplyr::select(-Hour) %>%
relocate(TIMEOFDAY, .after = CRASH.TIME)
head(crashes_sample)
head(crashes_sample)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("CRAN")
library(hms)
library(lubridate)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(caret)
library(e1071)
library(textclean)
library(MASS)
library(stringr)
library(fastDummies)
library('pROC')
# Data
raw_data = read.csv('Crashes.csv', header = TRUE)
#view(raw_data)
# I wanna change the format of my dates column from character to date, and from character in time to
raw_data$CRASH.DATE <- mdy(raw_data$CRASH.DATE) #gets the date format in the column
raw_data$CRASH.TIME <- str_pad(raw_data$CRASH.TIME, width = 5, side = "left", pad = "0") #this adds the 0 in front of of the numbers -> 05:05
raw_data$CRASH.TIME <- as_hms(paste0(raw_data$CRASH.TIME, ":00")) #this adds the :00 at the end so that it can be transformed into 05:05:00 since it is required for getting the time format in the column
raw_data$CRASH.TIME <- as_hms(raw_data$CRASH.TIME) #gets the time format in the column
#I wanna delete the empty ones in contributing factor 1 and vehicle type and number of people injured & killed and lat and long
crashes <- raw_data %>%
filter(CONTRIBUTING.FACTOR.VEHICLE.1 != "" & !is.na(CONTRIBUTING.FACTOR.VEHICLE.1) & VEHICLE.TYPE.CODE.1 != "" & !is.na(VEHICLE.TYPE.CODE.1) & NUMBER.OF.PERSONS.INJURED != "" & !is.na(NUMBER.OF.PERSONS.INJURED) & NUMBER.OF.PERSONS.KILLED != "" & !is.na(NUMBER.OF.PERSONS.KILLED) & LONGITUDE != "" & !is.na(LONGITUDE) & LATITUDE != "" & !is.na(LATITUDE))
# This is for checking if the rows with empty data points entries in two columns were deleted
# dim(raw_data)  # Original data dimensions
# dim(crashes)
# view(crashes)
# This is for checking dates count, range, structure of date, and check data
# start_date <- min(raw_data$CRASH.DATE, na.rm = TRUE)
# end_date <- max(raw_data$CRASH.DATE, na.rm = TRUE)
# start_date
# end_date
#range(raw_data$CRASH.DATE)
#str(raw_data$CRASH.DATE)
# raw_data
# ---------------------------------------------------------------- #
# This is for when I display the dates as in the format MM-DD-YYYY
#crashes$CRASH.DATE <- format(crashes$CRASH.DATE, "%m-%d-%Y")
# I am creating a stratified sample to make sure the sample I'm taking from the full dataset is representative,
# so that proportions are similar between the full dataset and the sampled dataset
set.seed(123) # this will ensure that the numbers don't change every time I run the file
crashes_sample <- crashes %>%
group_by(NUMBER.OF.PERSONS.INJURED, NUMBER.OF.PERSONS.KILLED, CONTRIBUTING.FACTOR.VEHICLE.1, VEHICLE.TYPE.CODE.1) %>%
sample_frac(100000 / nrow(crashes), replace = TRUE) %>%
ungroup()
crashes_sample
# CRASH.DATE into season
# 1. Create Month column(integer)
crashes_sample <- crashes_sample %>%
mutate(Month = as.integer(format(CRASH.DATE, "%m")))
# Creating column with season
crashes_sample <- crashes_sample %>%
mutate(SEASON = get_season(Month))
# CRASH.DATE into season
# 1. Create Month column(integer)
get_season <- function(month) {
case_when(
month %in% 3:5 ~ "Spring",
month %in% 6:8 ~ "Summer",
month %in% 9:11 ~ "Fall",
TRUE ~ "Winter"
)}
crashes_sample <- crashes_sample %>%
mutate(Month = as.integer(format(CRASH.DATE, "%m")))
# Creating column with season
crashes_sample <- crashes_sample %>%
mutate(SEASON = get_season(Month))
# Deleting column of month in integer format, and relocate season column
crashes_sample <- crashes_sample %>%
dplyr::select(-Month) %>%
relocate(SEASON, .after = CRASH.DATE)
# CRASH.TIME into time_of_day
get_time_of_day <- function(hour) {
case_when(
hour >= 5 & hour < 12  ~ "Morning",
hour >= 12 & hour < 17 ~ "Afternoon",
hour >= 17 & hour < 22 ~ "Night",
TRUE                   ~ "WeeHours"
)
}
crashes_sample <- crashes_sample %>%
mutate(Hour = as.integer(substr(CRASH.TIME, 1, 2)))
# Extract hour from "HH:MM" format
crashes_sample <- crashes_sample %>%
mutate(TIMEOFDAY = get_time_of_day(Hour))
# Apply function
crashes_sample <- crashes_sample %>%
dplyr::select(-Hour) %>%
relocate(TIMEOFDAY, .after = CRASH.TIME)
head(crashes_sample)
unique(crashes_sample$VEHICLE.TYPE.CODE.1)
